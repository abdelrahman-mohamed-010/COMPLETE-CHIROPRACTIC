---
export const prerender = true;

import CallToAction from "../../components/CallToAction.astro";
import Sidebar from "../../components/Sidebar";
import PrimaryLayout from "../../layouts/PrimaryLayout.astro";

export async function getStaticPaths() {
  const baseUrl = import.meta.env.STRAPI_URL_TWO;
  const token = import.meta.env.ASTRO_APP_API_TOKEN_TWO;

  const response = await fetch(`${baseUrl}/api/approach-pages?populate=*`, {
    headers: {
      'Authorization': `Bearer ${token}`
    }
  });

  const { data } = await response.json();
  
  if (!data || !Array.isArray(data)) {
    throw new Error('Invalid data format received from API');
  }

  return data.map((page: any) => ({
    params: { slug: page.Slug },
    props: { 
      title: page.Title,
      content: page.Content,
      // Set image to null if not provided in Strapi
      image: page.FeaturedImage?.url ? `${baseUrl}${page.FeaturedImage.url}` : null,
      date: page.createdAt || new Date().toISOString()
    }
  }));
}

const { title, content, image } = Astro.props;

---

<PrimaryLayout>
  <CallToAction />
  <main class="max-w-[1360px] mx-auto xl:px-8 px-4 py-12">
    {title && <h1 class="text-5xl capitalize font-bold mb-20">{title}</h1>}
    <div class="flex flex-col md:flex-row gap-8">
      <div class="md:w-3/4">
        {image && <img src={image} alt={title || 'Approach image'} class="w-full mb-8" />}
        <div class="prose prose-sm md:prose max-w-none">
          {content && Array.isArray(content) && content.map((block: any) => {
            if (block.type === 'list') {
              const ListTag = block.format === 'ordered' ? 'ol' : 'ul';
              return (
                <ListTag class="list-decimal ml-4 mb-4">
                  {block.children.map((item: any) => (
                    <li class="mb-2">
                      {item.children.map((child: any) => (
                        child.bold ? 
                          <strong>{child.text}</strong> : 
                          <Fragment set:html={child.text} />
                      ))}
                    </li>
                  ))}
                </ListTag>
              );
            }
            
            return block?.children?.[0]?.text && (
              <p class="mb-4">
                {block.children[0].bold ? 
                  <strong>{block.children[0].text}</strong> : 
                  block.children[0].text}
              </p>
            );
          })}
        </div>
      </div>
      
      <Sidebar client:only="react" />
    </div>
  </main>
</PrimaryLayout>